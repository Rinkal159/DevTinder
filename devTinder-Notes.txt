1. POST : Create an Account
    -> firstName
    -> lastName
    -> email (cannot change)
    -> password
    -> confirm password

2. POST : Create a Profile
    -> by default values : firstName, lastName and email
    -> Username (only one change in a year)
    -> age (cannot change)
    -> gender
    -> occupation
    -> techInterests
    -> isMarried (optional)


***important :
--------------

If by chance, you have defined any field as unique, and later you want to remove that uniqueness constraint, then in the mongo shell run following commands :

1. go to your database (show dbs -> use <db where your collection is>)
2. run this command to final check whether your expected schema is unique or not :
    db.<collection name>.getIndexes()
3. if that schema is unique, run this command :
    db.<collection name>.dropIndex(<name of that schema showing below the key on mongo shell>)


*** JWT AND COOKIE :
---------------------

->  Every time the user sends the request to the server to get some data or update or delete some data,
    server needs to aunthenticate the user. 
->  without a token or a cookie, each time user needs to login with his email id and password. then after the data will show, remove or update. Headache right?
->  token and cookie makes this work easier.
->  when user logs in, a JWT token wrapped inside the cookie will be generated and with each API either for updating the profile, or getting the profile or sending connection request, each time that cookie with token sends to the server, server authenticate it and sends back the response.
-> You donâ€™t need to log in again each time.
->  if authentication fails, or cookie expires, the server tells user to please log in.

-> Whenever a user logging in, server will create a token, wrapped it inside the cookie and sends back, then browser will store the cookie, any request will come from the site then cookie will be sent along to the server, server authenticate the cookie and then do things for what the request is meant to send.


-> JWT(JSON Web Token) : 
    - A JWT is a "self-contained" token used to securely transmit information between a client and a server.
    - JWT is a self-service.
    - it contains 3 things : 
        1. header
        2. payloads(data of the user)
        3. signature
    - There are two important JWT works : 
        1. sign : to generate the token 
                It takes two parameters : what needs to be hide and secret key
        2. verify : to authenticate the token
                It takes two parameter : the destructured token and the secret key
                It will not give a boolean result, but the value that was hide by the JWT sign.


-> Cookie :
    - A cookie is a small piece of data that a server sends to the "browser", which the "browser" stores and "automatically" sends back with every request to that server.
    - Advantages :
        - Browser stores the cookie.
        - Broweser automatically sends the cookie to the server.
        - Track user preferences.
        - Cookie can be set to expire. meaning, when the expiration period comes(like after 15 mins, or after 1 day), then browser will not send the cookie to the server, so the authentication failes, server tells the user to please log in to generate another cookie with token.

    -cookie has trwo types:
    1. session cookie: when the website is close, and when you reopen that site, you will be called to login again.
    2. persistent cookie: no relation with site close or reopen, it will expire based on time, like in one day or one week.


*** WHOLE PROCESS :
------------------

1. User successfully logged in
2. JWT token will generate. [ jwt.sign(the data that will hide, secret key) ]
3. Cookie wrapped the token inside it. [ res.cookie(name, value) ]
4. Browser send the cookie along with API. 
5. authentication process will begin.
6. server reades the cookie(req.cookies)
7. destructuring the token
8. authentication through jwt.verify(token, secret key )
9. if authentication get success, then it returns the hidden value that was hide by jwt.sign.


*** Set expiration on whom?  JWT or Cookie?

=> Best practice is to set the expiration option on "both".
-> If expiration is set on only JWT then cookie will send the token automatically after every API,wasting bandwidth.
-> If expiration is set on only Cookie then token will never expire, increasing the risk of extracting the old token by an unauthorized person.

-> JWT expiration is checked by Server when the token is sent to it for decoding or authentication
-> Cookie expiration is checked by the browser, it won't send expired cookies with request.


